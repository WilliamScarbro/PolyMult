fmod PATTERN is
  sort Pattern .
  op A : -> Pattern .
  op B : -> Pattern .
  op C : -> Pattern .
  op D : -> Pattern .
  op null : -> Pattern .
  op _ _ : Pattern Pattern -> Pattern [ assoc id: null] . 
endfm

fmod LABEL is 
  sort Label .
endfm

view Label from TRIV to LABEL is
  sort Elt to Label .
endv

mod PATTERN-FIND is
  pr INT .
  pr QID .
  pr PATTERN .
  pr SET{Label} .
  inc CONFIGURATION .

  subsort Label < Oid .
  subsort Label < Pattern .

  op Lab : -> Cid [ctor] .
  op Time : -> Cid [ctor] .
  op Pat :_  : Pattern -> Attribute [ctor gather (&)] .
  op Count :_  : Int -> Attribute [ctor gather (&)] .
  op Args :_ : Set{Label} -> Attribute [ctor] .
  op func : Oid Pattern -> Msg [ctor] .
  op time : Int -> Msg [ctor] .
  op count : -> Msg [ctor] .
  op o : Int -> Label [ctor] .

  
  vars a b : Oid .
  vars R S T U : Pattern .
  vars i : Int .
  vars args args2 : Set{Label} .
  
  rl [ increment ] : < a : Time | Count : i > count => < a : Time | Count : i + 1 > time(i) .
  crl [ propose ] : < a : Lab | Pat : R U S U T , Args : args > time(i) 
    => < a : Lab | Pat : R o(i) S o(i) T , Args : insert(o(i), args) >  < o(i) : Lab | Pat : U , Args : empty > count if not ( U == null ) /\ not ( U :: Label ) .
  crl [ accept ] : < a : Lab | Pat : R U S , Args : args > < b : Lab | Pat : U , Args : args2 > 
    => < a : Lab | Pat : R b S , Args : insert(b, args) > < b : Lab | Pat : U , Args : args2 > if not ( U == null ) /\ not ( U :: Label ) .
  
  op tConf : -> Configuration [ctor] .
  eq tConf = < o(-1) : Time | Count : 1 > count .
endm

***(
mod PATTERN-FORM is
  inc PATTERN-FIND .
  op Form : Cid [ctor] .
)
