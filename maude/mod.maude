loop init .

(fth NZNAT# is
  protecting NAT .
  op # : -> NzNat .
endfth)

(fmod NAT/{N :: NZNAT#} is
  sort Nat/{N} .
  op ‘[_‘] : Nat -> Nat/{N} [ctor] .
  op _+_ : Nat/{N} Nat/{N} -> Nat/{N} .
  op _*_ : Nat/{N} Nat/{N} -> Nat/{N} .
  vars N M : Nat .
  ceq [N] = [N rem #] if N >= # .
  eq [N] + [M] = [N + M] .
  eq [N] * [M] = [N * M] .
endfm)

(view 5 from NZNAT# to NAT is
  op # to term 5 .
endv)

( reduce in NAT/{5} : [10] .)
