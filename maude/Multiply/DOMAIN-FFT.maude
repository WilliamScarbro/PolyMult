*** domain level implementation of FFT
*** ideally this can be replaced by a more "equational" specification which compiles to this lower level description

load EX-DOMAIN .

fmod QR is
  pr EX-DOMAIN .

  sort QR .
  subsort QR < Type .
  
  *** QR(p,n,d,N) = F_P[X]/(X^n+w_N^d) (p and N stay constant)
  op qr : Rat Rat Rat Rat -> QR [ctor] .
  op ff : Rat -> Type .
  op qr-constr : QR -> Func .
  op ff-ctor : Rat Rat -> TypedTerminal .
  
  var k p n d N i : Rat .
  var a b : Ex .
  var T : Type .
  var Qr : QR .
  var L : Label .

  eq type-domain( ff(p) ) = point .
  eq type-domain( qr(p,n,d,N) ) = < 0,n > .
  eq index-type( qr(p,n,d,N) , { i } ) = ff(p) .
  eq index-type( ff(p) , { nil } ) = ff(p) .

  eq image-type(qr-constr(qr(p,n,d,N)),ARR(< 0,n >,ff(p))) = qr(p,n,d,N) .

  eq type(ff-ctor(p,i)) = ff(p) .
  eq substitute( ff-ctor(p,i) , L , a ) = ff-ctor(p,i) . 

endfm


fmod DOMAIN-FFT is
  pr EX-DOMAIN .
  pr QR . 
 
  op phi : Rat -> LabelFunc .
  op phi-inv : Rat QR -> LabelFunc .
  op omega : Rat Rat -> TypedTerminal . *** TT should be replaced by function, to allow index manipulation in EX-LANG

  var E : Ex .
  var z j i k p n d N m : Rat .
  var Qr : QR .

  eq type(omega(N,p)) = ARR(< 0,N >, ff(p)) .

*** phi
  eq [phi] : define(phi(k)[E],qr(p,n,d,N)) = for(phi(k),< 0,k >)[E] .
  eq [phi] : define(phi(k)@{z}[E],qr(p,n,d,N)) = for(phi(k)@{z},< 0,n / k >)[E] .
  eq [phi] : define(phi(k)@{z j}[E],qr(p,n,d,N)) = reduce(ADD,lambda(l("i"), null ))[ for(phi(k)@{z j},< 0,k >)[E]] .
  eq [phi-3] : define(phi(k)@{z j i}[E],qr(p,n,d,N)) = MULT[ split(n / k)[E] @ {i j} , omega(N,p) @ { ( d + z * N ) * (i / k) } ] .
   
*** phi-inv
  eq [phi-inv] : define(phi-inv(k,qr(p,n,d,N))[E],ARR(< 0,k >,ARR(< 0,m >, ff(p)))) = concat(m)[for(phi-inv(k,qr(p,n,d,N)),< 0,k >)[E]] .
  eq [phi-inv] : define(phi-inv(k,qr(p,n,d,N))@{i}[E],ARR(< 0,k >,ARR(< 0,m >, ff(p)))) = for(phi-inv(k,qr(p,n,d,N))@{i},< 0,n / k >)[E].
  eq [phi-inv] : define(phi-inv(k,qr(p,n,d,N))@{i j}[E],ARR(< 0,k >,ARR(< 0,m >, ff(p)))) = 
    MULT[MULT-INV[ff-ctor(p,k)], reduce(ADD,lambda(l("z"),null))[for(phi-inv(k,qr(p,n,d,N))@{i j},< 0,k >)[E]]] .
  eq [phi-inv] : define(phi-inv(k,qr(p,n,d,N))@{i j z}[E],ARR(< 0,k >,ARR(< 0,m >, ff(p)))) =
    MULT[ E @ {z j}, omega(N,p)@{ (-1) * ( d + z * N ) * (i / k) } ] .
endfm

fmod DOMAIN-FFT-TEST is
  pr DOMAIN-FFT .
  
  op ff-mult-inv : Rat Rat -> Rat .
  op generator : Rat -> Rat .

  eq evaluate(l("a") of qr(7,6,6,6) @ {0}) = 0 .
  eq evaluate(l("a") of qr(7,6,6,6) @ {1}) = 1 .
  eq evaluate(l("a") of qr(7,6,6,6) @ {2}) = 2 .
  eq evaluate(l("a") of qr(7,6,6,6) @ {3}) = 3 .
  eq evaluate(l("a") of qr(7,6,6,6) @ {4}) = 4 .
  eq evaluate(l("a") of qr(7,6,6,6) @ {5}) = 5 .

  var P p i : Rat .
  var E E2 : Ex .
 
  eq evaluate(omega(6,7) @ {P}) = evaluate(POWER[ff-ctor(7,generator(7)),ff-ctor(7,P)]) .
  eq generator(7) = 3 .

  eq evaluate-help( ADD[ E , E2 ] , ff(p) ) = (evaluate( E ) + evaluate( E2 )) rem p .
  eq evaluate-help( MULT[ E , E2 ] , ff(p) ) = (evaluate( E ) * evaluate( E2 )) rem p .
  eq evaluate-help( ADD-INV[ E ] , ff(p) ) = - evaluate(E) rem p .
  eq evaluate(ff-ctor(p,i))= i .
  eq evaluate-help( POWER[ E, E2 ] , ff(p) ) = modExp( evaluate(E) , evaluate(E2) , p ). 

  *** there is probably a better method, this method is O(p), may need to hardcode for larger values of p
  eq evaluate-help( MULT-INV[ E ], ff(p) ) = ff-mult-inv(evaluate(E),p) .
  ceq ff-mult-inv(i,p) = (generator(p) * ff-mult-inv((i * generator(p)) rem p,p)) rem p if i =/= 1 and i =/= p + - 1 .
  ceq ff-mult-inv(i,p) = i if i == p + - 1 . 
  eq ff-mult-inv(1,p) = 1 .

  *** temporary fix
  eq MULT-INV[E] @ {NaV} = MULT-INV[E] .
endfm
