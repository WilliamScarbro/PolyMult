load LAMBDA .
load UNIQ .

fmod INDEX is
  pr LIST{Rat} .
  sort Index .
  op point-index : -> Index .
  op {_} : List{Rat} -> Index .
  op index-append : Index Index -> Index . ***[ id: point-index ] .
  var RL RL2 : List{Rat} .
  eq index-append( { RL } , { RL2 } ) = { append( RL , RL2 ) } .
endfm

view Index from TRIV to INDEX is
  sort Elt to Index .
endv

fmod INDEX-FUNC is
  pr LAMBDA-RAT .
  pr INDEX .
  
  sort IndexFunc .
  sort FuncDef .
  sort LabelFunc .
  subsort IndexFunc < Func .
  subsort FuncDef < Func .
  subsort LabelFunc < Func .

  op _@_ : Func Index -> IndexFunc .
  op define : Ex Type -> Ex .
  op _@_ : Ex Index -> Ex .
  op append-index : Func Index -> Func .
  op index-type : Type Index -> Type .
  
  var F : Func .
  var IF : IndexFunc .
  var LF : LabelFunc .
  var I I2 : Index .
  var E : Ex .
  var T : Type .
  var L : Label .
  
  ***ceq F[E] @ I = define( F[E] ) @ I if not F :: FuncDef .
  ***ceq F @ I [E] @ I2 = define( F @ I[E] ) @ I2 if not F :: FuncDef .
  eq LF [E] @ I = define( LF[E],type(E) ) @ I .
  eq LF @ I [E] @ I2 = define(LF @ I [E],type(E)) @ I2 .
  
  *** For image type synthesis the definition of a LabelFunc can only depend on the type of its argument
  *** result of using "cannonical" label below
  eq image-type(LF,T) = type(define(LF[l("canonical") of T],T)) .
  eq image-type(LF @ I,T) = type(define(LF @ I[l("cannonical") of T],T)) .

  eq append-index( F @ I , I2 ) = F @ index-append( I, I2 ) .
  ceq append-index( F , I ) = F @ I if not F :: IndexFunc .
  eq E @ {nil} = E .
  eq point-index = { NaV } . 

  eq type(L of T @ I) = index-type(T,I) . 
endfm


fmod EX-DOMAIN is
  pr LAMBDA-UTIL .
  pr LIST{Index} .
  pr LIST{Ex} .
  pr INDEX-FUNC .
  pr UNIQ{Index} .

  sort Domain .
  sort Range .
  sort DomainMap .
  
  subsort Range < Domain .

  op <_,_> : Rat Rat -> Range .
  op point : -> Domain .
  
  op _x_ : Domain Domain -> Domain [ id: point assoc ] .
  op _ + _ : Range Range -> Range .
  op _ + _ : Domain Domain -> Domain .
  op _ intersect _ : Domain Domain -> Domain .
  op _ \ _ : Domain Domain -> Domain .
  op dimension : Domain -> Rat .
  op _[_] : DomainMap Domain -> Domain .

  op for : Func Domain -> FuncDef .
  op reduce : Oper Lambda -> LabelFunc .
  op reduce-help : Oper Lambda Rat Index -> FuncDef .
  op reduce-tup : Lambda -> FuncDef .
  op reduceT : Lambda Type -> Type .
  op reduceDM : Lambda -> DomainMap .

  op ARR : Range Type -> Type .
  op reduce-list : Oper List{Ex} -> Ex .
  op reduce-list-tup : List{Ex} -> Ex .
  op for-list : Ex List{Index} -> List{Ex} .
  op split : Rat -> Func .
  op concat : Rat -> Func .
  op splitT : Rat Type -> Type .
  op concatT : Rat Type -> Type .
  op splitDM : Rat -> DomainMap . 
  op concatDM : Rat -> DomainMap .

  op enumerate : Domain -> List{Index} .
  op enumerate-help : Index Domain -> List{Index} .
 
  op ident : -> Lambda .
  op row-major : Rat -> Lambda .
  op column-major : Rat -> Lambda .
  op transpose : Rat -> Lambda .
 
  op select : Func Ex -> Func .
  op select-help : Ex Ex Ex -> Ex .
  op list-to-tuple : List{Rat} -> Ex .
  op index-list-to-tuple : List{Index} -> List{Ex} .
  op tuple-list-to-index : List{Ex} -> List{Index} .
  *** tuple-to-index can be contructed directly through { evaluate( E ) }
 
  *** domain can be derived from type 
  op type-domain : Type -> Domain .
  op domain : Ex -> Domain .

  var F : Func .
  var E E2 E3 : Ex .
  var EL : List{Ex} .
  var NeEL : NeList{Ex} .
  var O : Oper .
  var D D2 : Domain .
  var R R2 : Range .
  var I : Index .
  var Y : Lambda .
  var T T2 : Type .
  var d i i' j j' z k m n : Rat .
  var RL RL2 : List{Rat} .
  var IL : List{Index} .

  
  eq domain( E ) = type-domain(type(E)) .
  eq type-domain( Tup( T , T2 ) ) = type-domain(T) + type-domain(T2) .
  eq (R x D) + (R2 x D2) = (R + R2) x D .
  eq < i,j > + < i',j' > = < i, j + i' + j' > . *** works even if tup/Tup is associative
  
  eq type-domain(ARR( R , T ) ) = R x type-domain( T ) .

  eq image-type( reduce( O , Y ) , T ) = reduceT( Y , T ) .
  eq image-type( reduce-help( O , Y , d , I ) , T ) = reduceT( Y , T ) .
  eq type-domain(reduceT( Y , T ) ) = reduceDM(Y)[type-domain(T)] .

  eq dimension( R x D) = 1 + dimension( D ) .
  eq dimension( point ) = 0 .
  eq dimension( reduceDM(Y)[ D ] ) = dimension(D) + -1 .
  eq dimension( concatDM(m)[D] ) = dimension(D) + -1 .
  eq dimension( splitDM(m)[D] ) = dimension(D) + 1 .

*** split/concat
  eq concat(m)[E] @ {i RL} = E @ {trunc(i / m) (i rem m) RL } .
  eq [split] : split(m)[E] @ {i j RL } = E @ {i * m + j } .
  eq [split] : image-type(split(m),T) = splitT(m,T) .
  eq image-type(concat(m),T) = concatT(m,T) .
  eq [split] : type-domain(splitT(m,T)) = splitDM(m)[type-domain(T)] .
  eq type-domain(concatT(m,T)) = concatDM(m)[type-domain(T)] .
  ceq [split] : splitDM(m)[ R x D ] = (splitDM(m)[R]) x D if D =/= point .
  ceq concatDM(m)[ R x R2 x D ] = (concatDM(m)[R x R2]) x D if D =/= point .
  eq [split] : splitDM(m)[< 0,n >] = < 0, n / m  > x < 0,m > .
  eq concatDM(m)[ < 0,k > x < 0,m > ] = < 0,k * m > .

*** for
  eq [index] : for( F , < i,j > ) [E] @ { z RL } = for(F, < i,j > ) @ {z} [E] @ { RL } .
  ceq [index] : for( F , < i,j > ) @ {z} [E]  = append-index(F,{ z }) [E] if ( z < j ) and ( z >= i ) .
  *** the type returned by a function cannot depend on the indeces it is evaluated at 
  eq image-type( for(F , < i,j > ) , T ) = ARR(< i,j >,image-type(append-index(F,{i}),T)) . 

*** enumerate
  ceq enumerate( < i,j > x D ) = append( enumerate-help( {i} , D ) , enumerate( < i + 1,j > x D ) ) if i + 1 < j .
  ceq enumerate( < i,j > x D ) = enumerate-help({i} , D ) if i + 1 == j .
  eq enumerate( point ) = nil .
  ceq enumerate-help( { RL }, < i,j > x D ) = append( enumerate-help( { append( RL ,i) } , D ) , enumerate-help( { RL }, < i + 1,j > x D ) ) if i + 1 < j .
  ceq enumerate-help( { RL }, < i,j > x D ) = enumerate-help( { append( RL , i) }, D ) if i + 1 == j .
  eq enumerate-help( I , point ) = I .
  eq enumerate( reduceDM(Y)[D] ) = uniq( tuple-list-to-index(  map( Y , index-list-to-tuple(enumerate(D)) ) ) ) .
  eq enumerate( splitDM(m)[D] ) = uniq( tuple-list-to-index( map( split-lambda(m,dimension(D)) , index-list-to-tuple(enumerate(D) ) ) ) ) .
  eq enumerate( concatDM(m)[D] ) = uniq( tuple-list-to-index( map( concat-lambda(m,dimension(D)) , index-list-to-tuple(enumerate(D) ) ) ) ) .
     
*** reduce-list
  ceq reduce-list-tup( E EL ) = tup( E, reduce-list-tup( EL ) ) if EL =/= nil .
  eq reduce-list-tup( E ) = E .
  ceq reduce-list( O , E EL ) = O[ E , reduce-list( O , EL ) ] if EL =/= nil .
  eq reduce-list( O , E ) = E .

*** index -> Ex and back
  eq index-list-to-tuple( { RL } IL ) = list-to-tuple( RL ) index-list-to-tuple( IL ) .
  eq index-list-to-tuple( nil ) = nil .
  ceq list-to-tuple( z RL ) = tup( r(z) , list-to-tuple( RL ) ) if RL =/= nil .
  ceq list-to-tuple( z ) = r(z) if z =/= NaV .
  eq list-to-tuple( nil ) = null .
  eq list-to-tuple( NaV ) = null .
  eq tuple-list-to-index( E EL ) = { evaluate( E ) } tuple-list-to-index( EL ) .
  eq tuple-list-to-index( nil ) = nil .
 
  eq for-list( E , I IL ) = append(E @ I, for-list( E , IL )) .
  eq for-list( E , nil ) = nil .

  eq select( F , E )[ E2 ] = select-help( list-to-tuple(evaluate(F[ E2 ])) , E , E2 ) .
  eq select-help( E , E , E2 ) = E2 .
  eq select-help( E , E2 , E3 ) = null [owise] . *** we should do something like tup(E2,true) or tup(E2,false) to make select reusable, this implementation assumes select is only used to contruct lists
  eq NeEL null  = NeEL .
  eq null NeEL = NeEL .
 
*** reduce
  *** this assumes that reduce always decreases the dimension of domain by one (and lambda maps R^(dim(domain(E))) -> R^(dim(domain(E))-1)" )
  
  *** define reduce, without index
  eq [index] : define(reduce( O , Y )[ E ],T) = reduce-help( O , Y , dimension(type-domain(T)) + - 1 , {nil}) [E] .
  
  *** define reduce, with index
  eq [index] : define(reduce( O , Y ) @ I [ E ],T) = reduce-help( O , Y , dimension(type-domain(T)) + - 1 , {nil}) @ I [E] .
  
  *** reduce-help read index, if underspecified (d>0) 
  ceq [index] : reduce-help( O , Y , d , I )[E] @ {z RL} = reduce-help(O ,Y, d, I) @ {z}[ E ] @ {RL} if d > 0 .
  
  *** reduce-help absorbs index, if underspecified (d>0) 
  ceq [index] : reduce-help( O , Y , d , { RL } ) @ { z RL2 } [ E ] = reduce-help( O , Y , d + - 1 , {RL z} ) @ {RL2} [ E ] if d > 0 .

  *** reduce-help absorbs point-index, only when Y maps to point (d==0 and I=={nil}) .
  eq [index] : reduce-help( O , Y , 0 , { nil }) @ { NaV } [ E ] = reduce-help( O , Y , 0 , { NaV }) [ E ] .

  *** eliminate empty index
  eq reduce-help( O , Y , d , I ) @ { nil } [E] = reduce-help( O , Y , d , I ) [ E ] .

  *** expand reduce-help when fully specified (d==0)
  eq [index] : reduce-help( O , Y , 0 , { RL } ) [ E ] = 
      reduce-list( O , for-list( E , tuple-list-to-index( map( select( Y , list-to-tuple(RL) ) , 
        index-list-to-tuple(enumerate( domain( E )) ) 
      ) ) ) ) .
  

endfm


fmod DOMAIN-TEST is
  pr EX-DOMAIN .
  pr EX-TEST .

  op myf : -> LabelFunc .
  eq type-domain(rat) = point .
  op myf2 : -> LabelFunc .

  op three-to-two : -> Lambda .
  eq three-to-two = lambda( l("z") l("j") l("i") , tup( l("z") of rat , l("j") of rat ) ) . 
  op ipj : -> Lambda .
  eq ipj = lambda( l("i") l("j") , ADD[ l("i") of rat , l("j") of rat ] ) .
  op two-to-one : -> Lambda .
  eq two-to-one = lambda( l("j") l("j"), l("j") of rat) .  

  op ar234 : -> Type .
  eq type-domain( ar234 ) = < 0,2 > x ( < 0,3 > x < 0,4 > ) .
  op ar23 : -> Type .
  eq type-domain( ar23 ) =  < 0,2 > x < 0,3 > .

   
  var E : Ex .
  var z i j n n' : Rat .

  eq index-type(ar23,{z j}) = rat .
  eq index-type(ar234,{z j i}) = rat .
  ***eq define( f[E] ) = for(f,< 0,2 >)[E] .
  ***eq define( f @ {z}[E] ) = reduce(ADD,two-to-one)[split(3)[E]] @ {z} .
  eq define( myf[E],ARR(< 0,n >,rat) ) = for(reduce(ADD,two-to-one), < 0,n >)[split(3)[E]] .
  eq define( myf2 @{z j i}[E],ar23 ) = MULT[E @ {i j},r(z)] .

endfm

