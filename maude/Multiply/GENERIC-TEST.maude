

fth F1 is
  sort Type .
  sort Elt .
  op oper : -> Elt .
endfth

fmod EX is
  sort Ex .
endfm

view Ex from TRIV to EX is
  sort Elt to Ex .
endv

fmod MOD{F :: F1} is
  pr EX * (sort Ex to Ex{F}) .
  subsort F$Elt < Ex{F} .
  op null : -> Ex{F} .
  eq oper = null .
endfm

fmod MOD2 is
  pr RAT .
  sort QR .
  sort qr .
  
  op qr-const : -> qr .
endfm

fmod MOD3 is
  pr RAT .
  sort R-Elt .
  sort R-Type .
endfm

view Mod2 from F1 to MOD2 is
  sort Type to QR .
  sort Elt to qr .
  op oper to qr-const .
endv

