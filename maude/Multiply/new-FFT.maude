load EQ-LANG .
load FACTOR .

fmod QR is
  pr EQ-LANG .

  sort QR .
  subsort QR < Type .
  
  *** QR(p,n,d,N) = F_P[X]/(X^n+w_N^d) (p and N stay constant)
  op qr : Rat Rat Rat Rat -> QR [ctor] .
  op ff : Rat -> Type .
  op qr-coef : Rat -> Func .
  op qr-constr : QR Rat -> Func .

  op mult : -> Oper .
  op add : -> Oper .
  
  var k p n d N i : Rat .
  var a b : Eq .
  var T : Type .
  var Qr : QR .

  eq image-type( qr-constr(Qr,k), T ) = Qr . 
  eq image-type( qr-coef(i) , qr(p,n,d,N) ) = ff(p) .

endfm

fmod FFT is
  pr QR . 
  pr LIST{Eq} .


  op phi-tup : Rat Rat Rat -> Func . *** k, i, j
  op phi : Rat Rat -> Func . *** k, i
  op phi-inv-tup : Rat Rat Rat -> Func . *** k, i, j
  op phi-inv : Rat Rat -> Func . *** k, i
  op fft : Rat -> Func . *** k
  op fft-inv : QR Rat -> Func . *** Qr, k : saves QR to know what to convert back to
  op phi-loop : Rat Eq -> Func .
  op inv : -> Func .
  
  op num : -> Type . *** generic number type, for use in range
  op rat : Rat -> Terminal .
  op omega : Rat Rat -> Terminal . *** does omega need to know its ff type? if so we need to add p to qr

  *** utility functions, differentiated from true functions so they respect transformation order
  *** i.e. these functions change (or evaluate) the underlying equation. Most of these changes need to be done in specific orders
  op range : Rat Rat -> List{Eq} .
  op make-tuple : List{Eq} -> Eq .
  op sum : List{Eq} -> Eq .
  op fft-red : Rat Eq -> Eq . *** k
  op fft-red-help : Rat Eq Type -> Eq .

  vars a b c : Eq .
  vars i j k p n d N : Rat .
  vars T : Type .
  vars F : Func .
  vars Term : Terminal .
  var L : Label .
  var EL : List{Eq} .
  var Qr : QR .

*** Utility
  eq make-tuple( a EL ) = tup( a , make-tuple( EL ) ) .
  eq make-tuple(nil) = nil .

  ceq sum( a EL ) = add[ a , sum(EL) ] if EL =/= nil .
  eq sum( a ) = a .

  eq fft-red(k,a) = fft-red-help(k,a,type(a)) .
  eq fft-red-help(k, a, Qr ) = fft-inv(Qr,k)[ fft(k)[ a ] ] . 

*** Forward FFT
  eq fft(k)[a] = make-tuple( for index( phi(k) , a ) on range(0,k) )  .

  eq phi(k) =  

  eq phi(k){i}[ mult[a,b] ] = mult[phi(k){i}[a], phi(k){i}[b]] .
  
  eq image-type( phi(k){i} , qr(p,n,d,N) ) = qr(p,n / k, (d + i * N) / k, N) . 


*** Inverse FFT
  eq fft-inv(qr(p,n,d,N),k)[a] = qr-constr(qr(p,n,d,N),k)[ for index( split(phi-inv(qr(p,n,d,N),k),k) , a) on range(0,n) ) ] .

  eq phi-inv(Qr,k){i}{j}[a] = mult[ inv[k] , sum( make-tuple( for index( phi-inv(Qr,k){i}{j} , a ) on range(0,k) ) ) ] .

  eq phi-inv(Qr,k){i}{j}{z}[a] = mult[ a{z}{j} 
***
***  eq fft(k)[a] = phi-tup(k,0,k - 1)[a] .
***
***  ceq phi-tup(k, i, j)[a] = tup(phi(k,i)[a],phi-tup(k,i + 1,j)[a]) if i < j .
***  ceq phi-tup(k, i, j)[a] = phi(k,i)[a] if i == j .
***  
***
***  
****** Inverse FFT
***  eq fft-inv(Qr,k)[ a ] = qr-constr(Qr,k)[phi-inv-tup(k,0,k - 1)[ a ] ] .
***
***  ceq phi-inv-tup(k,i,j)[ a ] = tup( phi-inv(k,i)[ a ] , phi-inv-tup(k,i + 1,j)[ a ] ) if i < j .
***  ceq phi-inv-tup(k,i,j)[ a ] = phi-inv(k,i)[ a ] if i == j .
***
***  eq image-type( phi-inv(k,i) , Tup(qr(p,n,d,N),T ) ) = ff(p) .
***
endfm

***fmod FFT-EVAL is
***  pr FFT .
***
***  op lowConv : Eq Eq -> Func .
***  op highConv : Eq Eq -> Func .
***  op convolution : Eq Eq QR -> Func .
***  
***  
***  vars a b c : Eq .
***  vars i j k n d N : Rat .
***  vars F : Func .
***
***  eq evaluate-help( mult[ a , b ] , qr(p,n,d,N) ) = qr-constr(qr(p,n,d,N))[make-tuple( map( convolution( a, b, qr(p,n,d,N)  ) , range(0,n) ) ) ] .
***
***  eq convolution( a , b , qr(n,d,N) )[ r(j) ] = add[ sum( map( lowConv( a , b ) , range(0,j) ) ) , mult[ omega(N,d) , sum( map( highConv( a, b ) , range(j + 1, n ) ) ) ] ] .
*** 
***  eq lowConv(a,b)[ rat(i) of num ] = mult[ coef(i)[a] , coef(j - i)[b] ] .
***  eq highConv(a,b,n)[ rat(i) of num] = mult[ coef(i)[a] , coef(n + j - 1)[b] ] .
***
***endfm
***
