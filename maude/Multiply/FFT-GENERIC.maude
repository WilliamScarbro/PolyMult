load EX-DOMAIN-GENERIC .

fmod FF-EX-DOM is
  pr EX-DOMAIN{FField} .
  pr FF-EX-LANG .
  
  op conv : Rat Rat -> LabelFunc{FField} .
  op conv-wrap : Rat Rat -> LabelFunc{FField} .
 
  var E : Ex{FField} . 
  var n p i j d N : Rat .
  eq type-domain(FF(p)) = point .
  eq [ conv ] : define( conv(d,N)[E] , ARR(< 0,2 >,ARR(< 0,n >,FF(p) ) ) ) = for( conv(d,N),  < 0,n >)[ E ] .
  eq [ conv ] : define( conv(d,N) @{i}[E], ARR(< 0,2 >,ARR(< 0,n >,FF(p) ) ) ) 
    = ADD[ simple-reduce(ADD,< 0,i + 1 >)[for(conv(d,N) @{i} , < 0,i + 1 > )[E] ] , 
        MULT[ l("omega") of ARR(< 0,N >,FF(p)) @ { d } , 
              simple-reduce(ADD,< i + 1,n >)[for(conv-wrap(d,N) @{i}, < 0,i >)[E] ] ] ] .
  eq [ conv ] : define( conv(d,N) @{i j}[E], ARR(< 0,2 >,ARR(< 0,n >,FF(p) ) ) ) = MULT[ E @ {0 j} , E @ {1 (i + - j) } ] . 
  eq [ conv ] : define( conv-wrap(d,N) @{i j}[E], ARR(< 0,2 >,ARR(< 0,n >,FF(p) ) ) ) = MULT[ E @ {0 j}, E @ {1 (n + i + - j) } ] .
endfm

fmod FFT-DOMAIN is
  pr FF-EX-DOM .
  
  op phi : Rat Rat Rat -> LabelFunc{FField} .
  op omega : Rat Rat -> TypedTerminal{FField} . *** TT should be replaced by function, to allow index manipulation in EX-LANG
 
  var E : Ex{FField} .
  var z j i k p n d N m : Rat .

*** phi
  eq [phi] : define(phi(k,d,N)[E],ARR(< 0,n >,FF(p))) = for(phi(k,d,N),< 0,k >)[E] .
  eq [phi] : define(phi(k,d,N)@{z}[E],ARR(< 0,n >,FF(p))) = for(phi(k,d,N)@{z},< 0,n / k >)[E] .
  eq [phi] : define(phi(k,d,N)@{z j}[E],ARR(< 0,n >,FF(p))) = simple-reduce(ADD,< 0,k >)[ for(phi(k,d,N)@{z j},< 0,k >)[E]] .
  eq [phi-3] : define(phi(k,d,N)@{z j i}[E],ARR(< 0,n >,FF(p))) = MULT[ split(n / k)[E] @ {i j} , l("omega") of ARR(< 0,N >,FF(p)) @ { ( d + z * N ) * (i / k) } ] .
  
endfm  

fmod QRING is
  pr FFIELD .
  pr OPER-FUNC * ( sort Func to QR-Func , sort Oper to QR-Oper ) .
  sort QR-Type .
  sort QR-Elt .

  *** QR : FF[X]/(X^n-w_N^d)
  op QR : FF-Type Rat Rat Rat -> QR-Type .
endfm

view QRing from ALGEBRA to QRING is
  sort Type to QR-Type .
  sort Elt to QR-Elt .
  sort Oper to FF-Oper .
  sort Func to FF-Func .
endv
  
***(
fmod FF-EX-LANG is
  pr EX-LANG{FField} .
  var r s p : Rat .
  var E E2 : Ex{FField} .
  eq evaluate-help(MULT[E,E2],FF(p)) = ff(& evaluate(E) * & evaluate(E2), p) .
  eq evaluate-help(ADD[E,E2],FF(p)) = ff(& evaluate(E) + & evaluate(E2), p) .
  eq evaluate-help(NEG[E],FF(p)) = ff( - & evaluate(E), p) .
  eq evaluate-help(M-INV[E],FF(p)) = ff( 1 / & evaluate(E), p) .
  eq type( ff(r,p) ) = FF(p) . 
endfm
)


fmod FFT-GENERIC-TEST is
  pr FF-EX-DOM .
  
  op ff-mult-inv : Rat Rat -> FF-Elt .
  op generator : Rat -> Rat .

  var i p n : Rat .
  eq evaluate(l("a") of ARR(< 0,2 >,ARR(< 0,n >,FF(p))) @ {i} = ff(i,p) .
  eq evaluate(l("b") of ARR(< 0,2 >,ARR(< 0,6 >,FF(7))) @ {0}) = ff(0,7) .
  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {1}) = ff(1,7) .
  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {2}) = ff(2,7) .
  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {3}) = ff(3,7) .
  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {4}) = ff(4,7) .
  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {5}) = ff(5,7) .

  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {0}) = ff(0,7) .
  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {1}) = ff(1,7) .
  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {2}) = ff(2,7) .
  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {3}) = ff(3,7) .
  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {4}) = ff(4,7) .
  eq evaluate(l("b") of ARR(< 0,2 >,AARR(< 0,6 >,FF(7)) @ {5}) = ff(5,7) .


  var P p n i : Rat .
  var E E2 : Ex{FField} .
 
  eq evaluate(index( l("omega(n,p)") of ARR(< 0,n >, FF(p)), {P} )) = evaluate(POWER[ff(n,generator(p)),ff(p,P)]) .
  eq generator(7) = 3 .

***  eq evaluate-help( ADD[ E , E2 ] , FF(p) ) = (evaluate( E ) + evaluate( E2 )) rem p .
***  eq evaluate-help( MULT[ E , E2 ] , FF(p) ) = (evaluate( E ) * evaluate( E2 )) rem p .
***  eq evaluate-help( ADD-INV[ E ] , FF(p) ) = - evaluate(E) rem p .
***  eq evaluate(ff-ctor(p,i))= i .
***  eq evaluate-help( POWER[ E, E2 ] , FF(p) ) = modExp( evaluate(E) , evaluate(E2) , p ). 
***
  *** there is probably a better method, this method is O(p), may need to hardcode for larger values of p
  eq evaluate-help( M-INV[ E ], FF(p) ) = ff-mult-inv(& evaluate(E),p) .
  ceq ff-mult-inv(i,p) = ff(generator(p) * & ff-mult-inv((i * generator(p)) rem p,p) rem p ,p)  if i =/= 1 and i =/= p + - 1 .
  ceq ff-mult-inv(i,p) = ff(i,p) if i == p + - 1 . 
  eq ff-mult-inv(1,p) = ff(1,p) .

  *** temporary fix
  ***eq M-INV[E] @ {NaV} = MULT-INV[E] .
endfm

